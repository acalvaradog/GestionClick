
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStore
@using Autogestion.Shared.DTO.Empleado
@using AutoGestion.Helpers;
@inject IJSRuntime JS
@if (_loading)

{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="my-7" />
}
else{

<MudText Typo="Typo.h6">Certificación Laboral</MudText>
 <MudCard>
    <MudCardContent>
            <MudTextField @bind-Value="Dirigidoa" Label="Dirigido a:" Variant="Variant.Outlined"></MudTextField>
        <MudCheckBox Label="Incluir Salario" @bind-Checked="Consalario"></MudCheckBox>
         <MudCheckBox Label="Incluir Funciones" @bind-Checked="Confunciones"></MudCheckBox>
            <MudButton OnClick="DownloadPdf" Variant="Variant.Filled" disabled="@Habilitarboton" hidden="@Habilitarboton">Descargar</MudButton>
    </MudCardContent>
@if (!string.IsNullOrEmpty(PdfBase64))
{

        <a href="data:application/pdf;base64,@PdfBase64" download="archivo.pdf"><MudButton Variant="Variant.Filled"  Color="Color.Success">Descargar Certificación</MudButton></a>
}
        <MudBadge Dot="true" Color="Color.Info" Class="mx-6 my-4">
            <MudText>Por favor tener en cuenta, que las certificaciones con funciones no se pueden descargar automaticamente.se enviará solicitud a gestión humana.</MudText>
        </MudBadge>
</MudCard>

}

@code {
    bool _loading = false;
    DateTime? _yearMonth = DateTime.Now;
    private EmpleadoReturnSapDTO DatosEmpleado = new EmpleadoReturnSapDTO();
    private string Dirigidoa;
    private bool Consalario = false;
    private bool Confunciones = false;
    private string PdfBase64;
    private string Parametro = "";
    private bool  Habilitarboton = false ;
    protected override async Task OnInitializedAsync()
    {

        try
        {
            DatosEmpleado = await localStore.GetItemAsync<EmpleadoReturnSapDTO>("User");
            Parametro = await Http.GetFromJsonAsync<string>($"api/ConsultarConfiguracion/{"CE_BTN_CERTIFICADOLA"}");
            Habilitarboton = Convert.ToBoolean(Parametro);

        }
        catch (Exception)
        {

            throw;
        }

    }
    private async Task DownloadPdf()
    {

        try
        {
            _loading = true;

            string incluirsalario = "";
            if (Confunciones == false)

            {
                if (Consalario) 

                    

                {
                    incluirsalario = "X";
                    if (Dirigidoa == null || Dirigidoa == "")
                    {

                        PdfBase64 = await Http.GetFromJsonAsync<string>($"api/certificacion/{DatosEmpleado.PERNR}/{incluirsalario}/''/");
                    }
                    else
                    {
                        PdfBase64 = await Http.GetFromJsonAsync<string>($"api/certificacion/{DatosEmpleado.PERNR}/{incluirsalario}/{Dirigidoa}");    

                    }


                }else
                
                {
                    if (Dirigidoa == null || Dirigidoa == "")
                    {

                        PdfBase64 = await Http.GetFromJsonAsync<string>($"api/certificacion/{DatosEmpleado.PERNR}/''/''/");
                    }
                    else
                    {
                        PdfBase64 = await Http.GetFromJsonAsync<string>($"api/certificacion/{DatosEmpleado.PERNR}/''/{Dirigidoa}");

                    }
                }

           

            }
            else

            {
                var respuesta = await Http.GetAsync($"api/enviar_correo/{DatosEmpleado.PERNR}/{DatosEmpleado.ENAME}/{DatosEmpleado.BUKRS}");


                if (respuesta.IsSuccessStatusCode)

                {
                    var valido = respuesta.Content.ReadAsStringAsync();

                    if (valido.Result == "true")
                    {

                        await JS.ShowMessage("Certificado", "Se ha enviado solicitud de certificación", "success");
                    }
                    else
                    
                    {
                        await JS.ShowMessage("Certificado", "Error al enviar solicitud, por favor comunicarse con gestión humana", "error");
                    }
                }
                else
                {
                    
                
                }

            }
            _loading = false;
        }
        catch (Exception)
        {
            _loading = false;
            throw;
        }
  
    
    }
}
