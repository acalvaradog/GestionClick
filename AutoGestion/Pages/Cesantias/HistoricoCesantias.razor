@page "/historialcesantias"
@inject HttpClient Http
@using Autogestion.Shared.DTO.Cesantias
@inject IJSRuntime JS
@using AutoGestion.Helpers;
@using System.Text;
@using System.Text.RegularExpressions;
@using Autogestion.Shared.DTO.Empleado;

@if (_loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Size="Size.Large" Class="my-7" />
    <MudText Align="Align.Center" Typo="Typo.body1">Procesando...</MudText>
}
else{
    <MudTable Items="@solicitudes" Dense="true">
        <HeaderContent>
            <MudTh>ID Solicitud</MudTh>
            <MudTh>Fecha Registro</MudTh>
            <MudTh>Valor Solicitado</MudTh>
            <MudTh>Destino</MudTh>
            <MudTh>Estado</MudTh>
            <MudTh>Acciones</MudTh>
            <MudTh></MudTh>
            <MudTh>Observación</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.FechaRegistro</MudTd>
            <MudTd>@context.ValorRetiro</MudTd>
            <MudTd>@context.Destino.Nombre</MudTd>
            <MudTd>@context.Estado.Nombre</MudTd>
            <MudTd>
                @if (context.EstadoId == 2) { 
                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                Color="Color.Primary"
                                   OnClick="() => DescargarPdf(context.Id)" />
                }
            </MudTd>
            <MudTd>
                @if (context.EstadoId == 4)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Payment"
                                   Color="Color.Primary"
                                   OnClick="() => DescargarCartaFondo(context.Id)" />
                }
            </MudTd>
             <MudTd>
                <MudTextField @bind-Value="@context.Observacion"
                           
                              Lines="5"
                              Variant="Variant.Filled"
                              Adornment="Adornment.None"
                         
                    />

             </MudTd>
        </RowTemplate>
    </MudTable>
}


@code {
    private bool _loading = false;
    private EmpleadoReturnSapDTO datosempleado { get; set; }
    private List<SolicitudCesantiaDTO> solicitudes = new();
    protected override async Task OnInitializedAsync()
    {
        datosempleado = await localStore.GetItemAsync<EmpleadoReturnSapDTO>("User");
        await ConsultarSolicitudes();
        StateHasChanged();

    }

    private async Task ConsultarSolicitudes()
    {
        try
        {
            _loading = true;
            solicitudes = await Http.GetFromJsonAsync<List<SolicitudCesantiaDTO>>($"api/cesantias/obtener-solicitudes-por-empleado/{datosempleado.Id}");
            _loading = false;
        }
        catch (Exception ex)
        {
            await JS.ShowMessage("Ok", $"Error al consultar", "Error");
            _loading = false;

        }
    }

    private async Task DescargarPdf(int solicitudId)
    {
        try
        {
            _loading = true;
            // Llamar a la API para obtener el PDF en base64
            var response = await Http.GetAsync($"api/cesantias/GenerarCarta/{solicitudId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<string>();
                if (result != null)
                {
      

                    // Descargar el PDF
                    var fileName = $"CartaCesantia_{solicitudId}.pdf";
                    await JS.InvokeVoidAsync("descargarArchivo", fileName, result);
                }
                else
                {
                    await JS.ShowMessage("Ok", "No se pudo generar el PDF.", "Error");
                }
            }
            else
            {
                await JS.ShowMessage("Ok", "Error al llamar a la API.", "Error");
            }

            _loading = false;
        }
        catch (Exception ex)
        {
            _loading = false;
            await JS.ShowMessage("Ok", $"Error al descargar el PDF: {ex.Message}", "Error");
        }
    }

    private async Task DescargarCartaFondo(int solicitudId)
    {
        try
        {
            _loading = true;
            // Llamar a la API para obtener el PDF en base64
            var response = await Http.GetAsync($"api/cesantias/getCartaFondo/{solicitudId}");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<string>();
                if (result != null)
                {
            

                    // Descargar el PDF
                    var fileName = $"CartaFondo_{solicitudId}.pdf";
                    await JS.InvokeVoidAsync("descargarArchivo", fileName, result);
                }
                else
                {
                    await JS.ShowMessage("Ok", "No se pudo generar el PDF.", "Error");
                }
            }
            else
            {
                await JS.ShowMessage("Ok", "Error al llamar a la API.", "Error");
            }

            _loading = false;
        }
        catch (Exception ex)
        {
            _loading = false;
            await JS.ShowMessage("Ok", $"Error al descargar el PDF: {ex.Message}", "Error");
        }
    }
}
