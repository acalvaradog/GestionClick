@page "/dosimetria"
@inject HttpClient Http
@using MudBlazor
@using Autogestion.Shared.DTO;
@using Autogestion.Shared.DTO.Empleado;
@using System;
@using System.Globalization;
@inject Blazored.LocalStorage.ILocalStorageService localStore
<MudContainer>
    @if (dosisResult != null)
    {
        @foreach (var item in dosisResult)
        {
            <MudCard Class="pa-4 mt-4" Elevation="4">
                <MudCardHeader>
                    <MudText Typo="Typo.h5" Class="font-weight-bold">Año: @item.año Sede @item.NombreSede</MudText>
                </MudCardHeader>

                <MudCardContent>
                    <!-- Resumen anual -->
                    <MudGrid Spacing="2" Justify="Justify.FlexStart">
                        @if (item.TotalAnualHp10.HasValue && item.TotalAnualHp10.Value.ToString() != "0,0")
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudPaper Class="pa-3" Elevation="1">
                                    <MudChip Color="Color.Primary" Variant="Variant.Filled" Class="mb-2">Dosis Anual Tórax</MudChip>
                                    <MudText Typo="Typo.body1" Class="font-weight-bold">@item.TotalAnualHp10</MudText>
                                </MudPaper>
                            </MudItem>
                        }

                        @if (item.TotalAnualHp3.HasValue && item.TotalAnualHp3.Value.ToString() != "0,0")
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudPaper Class="pa-3" Elevation="1">
                                    <MudChip Color="Color.Secondary" Variant="Variant.Filled" Class="mb-2">Dosis Anual Cristalino</MudChip>
                                    <MudText Typo="Typo.body1" Class="font-weight-bold">@item.TotalAnualHp3</MudText>
                                </MudPaper>
                            </MudItem>
                        }

@*                         @if (item.TotalAcumuladoHp10 > 0)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudPaper Class="pa-3" Elevation="1">
                                    <MudChip Color="Color.Info" Variant="Variant.Filled" Class="mb-2">Dosis Acumulada Tórax</MudChip>
                                    <MudText Typo="Typo.body1" Class="font-weight-bold">@item.TotalAcumuladoHp10</MudText>
                                </MudPaper>
                            </MudItem>
                        }

                        @if (item.TotalAcumuladoHp3 > 0)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudPaper Class="pa-3" Elevation="1">
                                    <MudChip Color="Color.Success" Variant="Variant.Filled" Class="mb-2">Dosis Acumulada Cristalino</MudChip>
                                    <MudText Typo="Typo.body1" Class="font-weight-bold">@item.TotalAcumuladoHp3</MudText>
                                </MudPaper>
                            </MudItem>
                        } *@
                    </MudGrid>

                    <!-- Detalles por mes -->
                    @if (item.ValoresPorMes != null && item.ValoresPorMes.Any())
                    {
                        <MudDivider Class="my-4" />

                        <MudExpansionPanels>
                            <MudExpansionPanel Text="Ver detalles por mes" Icon="@Icons.Material.Filled.CalendarMonth">
                                <MudGrid Spacing="2" Justify="Justify.FlexStart">
                                    @foreach (var valormes in item.ValoresPorMes)
                                    {
                                        <MudItem xs="12" sm="6" md="4" lg="3">
                                            <MudPaper Class="pa-3" Elevation="1">
                                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold mb-2">
                                                    @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(valormes.Mes)
                                                </MudText>

                                                @if (valormes.ValorHp3.HasValue && valormes.ValorHp3.Value.ToString() != "0,0")
                                                {
                                                    <MudText Typo="Typo.body2">Cristalin: @valormes.ValorHp3</MudText>
                                                }

                                                @if (valormes.ValorHp10.HasValue && valormes.ValorHp10.Value.ToString() != "0,0")
                                                {
                                                    <MudText Typo="Typo.body2">Tórax: @valormes.ValorHp10</MudText>
                                                }
                                               
                                            </MudPaper>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }
                </MudCardContent>
            </MudCard>
        }
    }
    else
    {
        <MudText Typo="Typo.h6" Class="text-center">No hay datos disponibles.</MudText>
    }
</MudContainer>



@code {
    private int empleadoId;
    private int anio;
    private List<ReporteDosimetriaViewModelDTO> dosisResult;
    private EmpleadoReturnSapDTO datosempleado { get; set; }
    protected override async Task OnInitializedAsync()
    { 
        datosempleado = await localStore.GetItemAsync<EmpleadoReturnSapDTO>("User");
       await ObtenerDosis();
       StateHasChanged();

    }
    private async Task ObtenerDosis()
    {
        try
        {
            if (datosempleado != null)


            { 

           


                dosisResult = await Http.GetFromJsonAsync<List<ReporteDosimetriaViewModelDTO>>($"api/dosimetria/GetDosisAnualYAcumulada?empleadoId={datosempleado.Id}");
            
            }
        }
        catch (Exception ex)
        {
            // Manejo de errores
            Console.WriteLine("error al consultar:" + ex.Message);
        }
    }
}
